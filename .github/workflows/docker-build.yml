name: Smart Docker Build & Deploy

on:
  # 发布时自动触发
  release:
    types: [created]
  
  # 手动触发
  workflow_dispatch:

env:
  IMAGE_NAME: bilichat-request

jobs:
  detect-changes:
    name: Detect Dependencies Changes
    runs-on: ubuntu-latest
    outputs:
      deps-changed: ${{ steps.check.outputs.deps-changed }}
      deps-hash: ${{ steps.check.outputs.deps-hash }}
      runtime-exists: ${{ steps.check.outputs.runtime-exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # 需要获取前一个commit来比较差异

      - name: Login to Docker Hub for image checking
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Check dependencies changes
        id: check
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        run: |
          # Install yq for TOML parsing (simpler than custom Python scripts)
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          
          # Extract dependencies using yq
          DEPS_STRING=$(yq -o json '.project.dependencies' pyproject.toml | jq -r 'sort | join("|")')
          
          if [[ "${DEPS_STRING}" == "null" || -z "${DEPS_STRING}" ]]; then
            echo "❌ No dependencies found in pyproject.toml"
            DEPS_STRING="no-deps-found"
            DEPS_HASH="fallback"
          else
            # Calculate hash of sorted dependencies string
            DEPS_HASH=$(echo "${DEPS_STRING}" | sha256sum | cut -d' ' -f1 | head -c 12)
          fi
          
          echo "deps-hash=${DEPS_HASH}" >> $GITHUB_OUTPUT
          echo "deps-string=${DEPS_STRING}" >> $GITHUB_OUTPUT
          
          echo "📋 Dependencies extracted:"
          echo "${DEPS_STRING:0:100}$([ ${#DEPS_STRING} -gt 100 ] && echo '...')"
          echo "🔍 Dependencies hash: ${DEPS_HASH}"
          
          # Single check for runtime image existence
          echo "🔍 Checking runtime image existence..."
          RUNTIME_IMAGE="${DOCKER_USERNAME}/${IMAGE_NAME}:runtime-${DEPS_HASH}"
          
          if docker manifest inspect "${RUNTIME_IMAGE}" >/dev/null 2>&1; then
            RUNTIME_EXISTS=true
            DEPS_CHANGED=false
            echo "✅ Runtime image ${RUNTIME_IMAGE} exists, can reuse"
          else
            RUNTIME_EXISTS=false
            DEPS_CHANGED=true
            echo "⚠️  Runtime image ${RUNTIME_IMAGE} not found, need to build"
          fi
          
          echo "deps-changed=${DEPS_CHANGED}" >> $GITHUB_OUTPUT
          echo "runtime-exists=${RUNTIME_EXISTS}" >> $GITHUB_OUTPUT
          
          echo "🎯 Detection results:"
          echo "  - Dependencies changed: ${DEPS_CHANGED}"
          echo "  - Runtime exists: ${RUNTIME_EXISTS}"
          echo "  - Dependencies hash: ${DEPS_HASH}"

  build-runtime:
    name: Build Runtime Base Image
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.deps-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push runtime image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.runtime
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:runtime-latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:runtime-${{ needs.detect-changes.outputs.deps-hash }}
          labels: |
            org.opencontainers.image.title=bilichat-request
            org.opencontainers.image.description=Internal runtime base image - DO NOT USE DIRECTLY
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor=well404
            image.type=runtime-base
            image.visibility=internal
            deps.hash=${{ needs.detect-changes.outputs.deps-hash }}
          cache-from: type=gha,scope=runtime
          cache-to: type=gha,mode=max,scope=runtime

      - name: Output runtime build info
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          DEPS_HASH: ${{ needs.detect-changes.outputs.deps-hash }}
        run: |
          echo "🚀 Runtime base image built successfully!"
          echo "📦 Tags pushed:"
          echo "  - ${DOCKER_USERNAME}/${IMAGE_NAME}:runtime-latest"
          echo "  - ${DOCKER_USERNAME}/${IMAGE_NAME}:runtime-${DEPS_HASH}"

  build-app:
    name: Build Application Image
    runs-on: ubuntu-latest
    needs: [detect-changes, build-runtime]
    if: always() && needs.detect-changes.result == 'success' && (needs.build-runtime.result == 'success' || needs.build-runtime.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Wait for runtime image (if just built)
        if: needs.detect-changes.outputs.deps-changed == 'true'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          DEPS_HASH: ${{ needs.detect-changes.outputs.deps-hash }}
        run: |
          echo "⏳ Waiting for runtime image to be available..."
          RUNTIME_IMAGE="${DOCKER_USERNAME}/${IMAGE_NAME}:runtime-${DEPS_HASH}"
          TIMEOUT=600  # 10 minutes timeout
          ELAPSED=0
          SLEEP_TIME=5  # Start with 5 seconds
          MAX_SLEEP=30  # Max sleep time
          
          while ! docker manifest inspect "${RUNTIME_IMAGE}" >/dev/null 2>&1; do
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "❌ Timeout waiting for runtime image (${TIMEOUT}s)"
              exit 1
            fi
            
            echo "⏳ Still waiting... (${ELAPSED}s/${TIMEOUT}s, next check in ${SLEEP_TIME}s)"
            sleep $SLEEP_TIME
            ELAPSED=$((ELAPSED + SLEEP_TIME))
            
            # Exponential backoff with max limit
            if [ $SLEEP_TIME -lt $MAX_SLEEP ]; then
              SLEEP_TIME=$((SLEEP_TIME * 2))
              if [ $SLEEP_TIME -gt $MAX_SLEEP ]; then
                SLEEP_TIME=$MAX_SLEEP
              fi
            fi
          done
          echo "✅ Runtime image is now available"

      - name: Generate app image tags
        id: meta
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            # 发布时使用版本号
            VERSION=${{ github.event.release.tag_name }}
            TAGS="${DOCKER_USERNAME}/${IMAGE_NAME}:${VERSION}"
            TAGS="${TAGS},${DOCKER_USERNAME}/${IMAGE_NAME}:latest"
          else
            # 其他情况使用分支名和短SHA
            BRANCH=${GITHUB_REF#refs/heads/}
            SHORT_SHA=${GITHUB_SHA::7}
            TAGS="${DOCKER_USERNAME}/${IMAGE_NAME}:${BRANCH}-${SHORT_SHA}"
            if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
              TAGS="${TAGS},${DOCKER_USERNAME}/${IMAGE_NAME}:latest"
            fi
          fi
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

      - name: Update Dockerfile to use correct runtime tag
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          DEPS_HASH: ${{ needs.detect-changes.outputs.deps-hash }}
        run: |
          # 更新Dockerfile以使用正确的runtime标签
          sed -i "s|FROM well404/bilichat-request:runtime-latest|FROM ${DOCKER_USERNAME}/${IMAGE_NAME}:runtime-${DEPS_HASH}|" docker/Dockerfile

      - name: Build and push application image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.title=bilichat-request
            org.opencontainers.image.description=BiliChat Request Application
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor=well404
            image.type=application
            runtime.deps-hash=${{ needs.detect-changes.outputs.deps-hash }}
            build.trigger=${{ github.event_name }}
            build.deps-changed=${{ needs.detect-changes.outputs.deps-changed }}
          cache-from: type=gha,scope=app
          cache-to: type=gha,mode=max,scope=app

      - name: Output final build info
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          DEPS_HASH: ${{ needs.detect-changes.outputs.deps-hash }}
          DEPS_CHANGED: ${{ needs.detect-changes.outputs.deps-changed }}
        run: |
          echo "🎉 Build completed successfully!"
          echo ""
          echo "📦 Application images pushed:"
          echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | sed 's/^/  - /'
          echo ""
          echo "🏗️  Build context:"
          echo "  - Trigger: ${{ github.event_name }}"
          echo "  - Dependencies changed: ${DEPS_CHANGED}"
          echo "  - Runtime hash: ${DEPS_HASH}"
          echo "  - Runtime rebuilt: ${{ needs.detect-changes.outputs.deps-changed == 'true' && 'Yes' || 'No' }}"
          echo ""
          if [[ "${DEPS_CHANGED}" == "true" ]]; then
            echo "🔄 Full rebuild performed (runtime + app)"
            echo "📦 Runtime image: ${DOCKER_USERNAME}/${IMAGE_NAME}:runtime-${DEPS_HASH}"
          else
            echo "⚡ Fast build performed (app only)"
            echo "♻️  Reused runtime: ${DOCKER_USERNAME}/${IMAGE_NAME}:runtime-${DEPS_HASH}"
          fi